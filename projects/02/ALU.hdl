// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // perform all required operations
    

    // use multiplexors to direct correct output
    // zero out x if zx = 1
    Mux16(a=x,b[0..15]=false,sel=zx,out=zeroXOutput);
    Not16(in=zeroXOutput,out=notZeroXOutput);
    // choose final X input based on nx
    Mux16(a=zeroXOutput,b=notZeroXOutput,sel=nx,out=finalXInput);

    // zero out Y if zy = 1
    Mux16(a=y,b[0..15]=false,sel=zy,out=zeroYOutput);
    Not16(in=zeroYOutput,out=notZeroYOutput);
    // choose final Y based on ny
    Mux16(a=zeroYOutput,b=notZeroYOutput,sel=ny,out=finalYInput);
    
    // Add x + y which will be used if f = 1
    Add16(a=finalXInput,b=finalYInput,out=aPlusb);
    // And x & y which will be used if f = 0
    And16(a=finalXInput,b=finalYInput,out=aAndb);

    // select primary computation based on f
    Mux16(a=aAndb,b=aPlusb,sel=f,out=tempOut);
    // calculate !computation
    Not16(in=tempOut,out=notTempOut);

    // select a candidateOutput based on no control bit
    Mux16(a=tempOut,b=notTempOut,sel=no,out=candidateOut);

    // Check if all bits are zero
    Or16Way(in=candidateOut,out=oredCandidateOut);
    // set zr to opposite of orred output
    Not(in=oredCandidateOut,out=zr);

    // set ng to the MSB and drop all other bits of the output, using a OR gate
    // there might be other way to do this
    And16(a[0..15]=true,b=candidateOut,out[15]=ng,out[0..14]=drop);

    // just pass candidateOut as is into Out; nice trick
    Or16(a=candidateOut,b[0..15]=false,out=out);
}
