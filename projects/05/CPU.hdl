// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Instruction passthrough
    Or(a=false,b=instruction[15],out=isComputation);
    Not(in=instruction[15], out=notAComputation);
    Or16(a=instruction, b=false, out[0..14]=instructionAddress);
    // First Mux
    Mux16(a=aluOut,b=instruction,sel=notAComputation,out[0..14]=instructionOut);

    // A Register
    // ARegister(in[0..14]=instructionOut,in[15]=false,load=instruction[5],out=aRegisterOut);
    And(a=instruction[5],b=isComputation,out=loadForComputation);
    Or(a=notAComputation,b=loadForComputation,out=loadARegister);
    ARegister(in[0..14]=instructionOut,in[15]=false,load=loadARegister,out=aRegisterOut);

    // D Register
    And(a=instruction[4],b=isComputation,out=loadDForComputation);
    And(a=isComputation,b=loadDForComputation,out=loadDRegister);
    DRegister(in=aluOut,load=loadDRegister,out=dRegisterOut);

    // writeM
    And(a=instruction[15],b=instruction[3],out=writeM);

    // addressM
    Or16(a[0..15]=false, b=aRegisterOut, out[0..14]=addressM);

    // Second Mux16
    Mux16(a=aRegisterOut,b=inM,sel=instruction[12],out=secondMuxOut);

    // Program Counter
    // is Negative?
    And(a=instruction[2],b=aluNgOut, out=isNegative);
    And(a=instruction[1],b=aluZrOut, out=isZero);
    Not(in=aluNgOut,out=notNg);
    Not(in=aluZrOut,out=notZero);
    And(a=notNg,b=notZero,out=notNgOrZero);
    And(a=instruction[0],b=notNgOrZero, out=isPositive);

    Or8Way(in[3..7]=false, in[2]=isNegative, in[1]=isZero, in[0]=isPositive, out=shouldLoadPC);

    And(a=shouldLoadPC,b=isComputation,out=shouldActuallyLoadPC);

    Not(in=shouldActuallyLoadPC, out=shouldNotLoadPC);

    Or(a=shouldNotLoadPC,b=notAComputation,out=shouldInc);

    PC(reset=reset,in=aRegisterOut,load=shouldActuallyLoadPC,inc=shouldInc,out[0..14]=pc);

    // ALU
    ALU(x=dRegisterOut,y=secondMuxOut,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],zr=aluZrOut,ng=aluNgOut,out=aluOut);
    Or16(a=aluOut,b=false,out=outM);
}
